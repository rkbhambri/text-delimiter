{"version":3,"sources":["components/Header/Header.js","components/Description/Description.js","components/ColumnData/ColumnData.js","components/Controls/Controls.js","components/DelimiterWrap/ConverterSettings/ConverterSettings.js","components/DelimiterData/DelimiterData.js","components/DelimiterWrap/DelimiterWrap.js","containers/Layout/Layout.js","App.js","serviceWorker.js","index.js","settings.svg"],"names":["Header","props","react_default","a","createElement","className","Description","ColumnData","style","minHeight","value","columnText","onChange","event","changeColumnText","Controls","defaultValue","changeDelimiter","onClick","delimitData","reset","ConverterSettings","lineHeight","removeNewLine","type","name","defaultChecked","removeDuplicateToggle","selectExplode","marginLeft","addQuotes","DelimiterData","delimitedText","changeDelimitedText","DelimiterWrap","state","delimiter","isSettingsVisible","explode","isRemoveNewLine","isRemoveDuplicate","quotes","_this","setState","target","split","join","delimitedArray","uniqueDelimitedTextArray","map","item","includes","push","converterSettingToggle","_this2","this","components_ColumnData_ColumnData","components_Controls_Controls","components_DelimiterData_DelimiterData","cursor","src","settingsImage","width","height","alt","DelimiterWrap_ConverterSettings_ConverterSettings","Component","Layout","components_Header_Header","components_Description_Description","components_DelimiterWrap_DelimiterWrap","App","containers_Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.a7b6d17c.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => {\n    return (\n        <div className=\"header w-100 text-center p-4\">\n            Text Delimiter\n        </div>\n    );\n};\n\nexport default Header;\n","\nimport React from 'react';\n\nconst Description = () => {\n    return (\n        <div className=\"description col-md-6 offset-3 text-center pt-4 mt-4\">\n            Do you often need to take a spreadsheet of data and convert to a comma-delimited list?\n            Be it for taking a list of zip codes or names to make an SQL query, or to take data from a CSV and be able to paste into an array.\n            Enter your non-delimited data on the left, hit the button, and boom, separated data on the right. Special configs are below if the defaults aren't what you need!\n    </div>\n    );\n};\n\nexport default Description;","import React from 'react';\n\nconst ColumnData = (props) => {\n    return (\n        <div className=\"column-data-wrapper col-md-5 text-center\">\n            <div className=\"Title text-center\">\n                <h2>Column Data</h2>\n            </div>\n            <div className=\"column-data\">\n                <textarea\n                    className=\"w-100\"\n                    style={{ minHeight: '250px' }}\n                    value={props.columnText}\n                    onChange={(event) => props.changeColumnText(event)} />\n            </div>\n        </div>\n    )\n};\n\nexport default ColumnData;\n","import React from 'react';\n\nconst Controls = (props) => {\n    return (\n        <div className=\"controls-wrapper mt-5 p-4\">\n            <select className=\"form-control mt-2\" defaultValue=\",\" onChange={(event) => props.changeDelimiter(event)}>\n                <option value=\",\">,</option>\n                <option value=\";\">;</option>\n                <option value=\"|\">|</option>\n                <option value=\":\">:</option>\n                <option value=\" \">Spaces</option>\n            </select>\n            <button\n                className=\"btn btn-primary form-control mt-2\"\n                onClick={props.delimitData}>-]</button>\n            <button\n                className=\"btn btn-primary form-control mt-2\"\n                onClick={props.reset}>Reset</button>\n        </div>\n    );\n};\n\nexport default Controls;\n","import React from 'react';\n\nconst ConverterSettings = (props) => {\n    return (\n        <div className=\"converter-settings border w-100 mt-3\">\n            <div className=\"tidyup row col-md-7\">\n                <div className=\"settings-title col-md-6 p-3\" style={{ lineHeight: '14px' }}>\n                    <p>Tidy Up</p>\n                    <p>Remove the new lines from output?</p>\n                </div>\n                <form className=\"select col-md-5 p-4\" onChange={(event) => props.removeNewLine(event)}>\n                    <label className=\"radio-inline\">\n                        <input type=\"radio\" name=\"tidyup\" value=\"true\" defaultChecked /> Yes\n                    </label>\n                    <label className=\"radio-inline pl-4\">\n                        <input type=\"radio\" name=\"tidyup\" value=\"false\" /> No\n                    </label>\n                </form>\n            </div>\n            <div className=\"remove-duplicates row col-md-7\">\n                <div className=\"settings-title col-md-6 p-3\" style={{ lineHeight: '14px' }}>\n                    <p>Attack the clones</p>\n                    <p>Remove the duplicates from the result set</p>\n                </div>\n                <form className=\"select col-md-6 p-4\" onChange={(event) => props.removeDuplicateToggle(event)}>\n                    <label className=\"radio-inline\">\n                        <input type=\"radio\" name=\"duplicates\" value=\"true\" /> Yes\n                    </label>\n                    <label className=\"radio-inline pl-4\">\n                        <input type=\"radio\" name=\"duplicates\" value=\"false\" defaultChecked /> No\n                    </label>\n                </form>\n            </div>\n            <div className=\"explode row col-md-7\">\n                <div className=\"settings-title col-md-6 p-3\" style={{ lineHeight: '14px' }}>\n                    <p>Explode</p>\n                    <p>Explode your records using this</p>\n                </div>\n                <form className=\"select col-md-5 p-4\" onChange={(event) => props.selectExplode(event)}>\n                    <label className=\"radio-inline\">\n                        <input type=\"radio\" name=\"explode\" value=\"\\n\" defaultChecked /> New Lines\n                    </label>\n                    <label className=\"radio-inline pl-4\">\n                        <input type=\"radio\" name=\"explode\" value=\";\" /> Semicolons\n                    </label>\n                    <label className=\"radio-inline\">\n                        <input type=\"radio\" name=\"explode\" value=\" \" /> Spaces\n                    </label>\n                    <label className=\"radio-inline\" style={{ marginLeft: '45px' }}>\n                        <input type=\"radio\" name=\"explode\" value=\",\" /> Commas\n                    </label>\n\n                </form>\n            </div>\n            <div className=\"add-quotes row col-md-7\">\n                <div className=\"settings-title col-md-6 p-3\" style={{ lineHeight: '14px' }}>\n                    <p>Quotes</p>\n                    <p>Add quotes to each record</p>\n                </div>\n                <form className=\"select col-md-6 p-4\" onChange={(event) => props.addQuotes(event)}>\n                    <label className=\"radio-inline\">\n                        <input type=\"radio\" name=\"quotes\" defaultChecked /> No\n                    </label>\n                    <label className=\"radio-inline pl-4\">\n                        <input type=\"radio\" name=\"quotes\" value='\"\"' /> Double\n                    </label>\n                    <label className=\"radio-inline pl-4\">\n                        <input type=\"radio\" name=\"quotes\" value=\"''\" /> Single\n                    </label>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default ConverterSettings;\n","import React from 'react';\n\nconst DelimiterData = (props) => {\n    return (\n        <div className=\"delimiter-data-wrapper col-md-5 text-center\">\n            <div className=\"Title text-center\">\n                <h2>Delimiter Data</h2>\n            </div>\n            <div className=\"delimiter-data\">\n                <textarea\n                    className=\"w-100\"\n                    style={{ minHeight: '250px' }}\n                    value={props.delimitedText}\n                    onChange={(event) => props.changeDelimitedText(event)} />\n            </div>\n        </div>\n    )\n};\n\nexport default DelimiterData;\n","import React, { Component } from 'react';\nimport ColumnData from '../ColumnData/ColumnData';\nimport Controls from '../Controls/Controls';\nimport ConverterSettings from './ConverterSettings/ConverterSettings';\nimport DelimiterData from '../DelimiterData/DelimiterData';\nimport settingsImage from '../../settings.svg';\n\nclass DelimiterWrap extends Component {\n\n\tstate = {\n\t\tdelimiter: '',\n\t\tcolumnText: '',\n\t\tdelimitedText: '',\n\t\tisSettingsVisible: false,\n\t\texplode: null,\n\t\tisRemoveNewLine: true,\n\t\tisRemoveDuplicate: false,\n\t\tquotes: null\n\t};\n\n\tchangeDelimiter = (event) => {\n\t\tthis.setState({ delimiter: event.target.value });\n\t};\n\n\tchangeColumnText = (event) => {\n\t\tthis.setState({ columnText: event.target.value });\n\t};\n\n\tchangeDelimitedText = (event) => {\n\t\tthis.setState({\n\t\t\tdelimitedText: event.target.value\n\t\t});\n\t};\n\n\tdelimitData = () => {\n\t\tlet delimitedText = this.state.delimitedText;\n\t\tif (this.state.explode === null) {\n\t\t\tdelimitedText = this.state.columnText.split(' ').join(this.state.delimiter);\n\t\t}\n\t\tif (this.state.explode === '\\\\n') {\n\t\t\tdelimitedText = this.state.columnText.split(' ').join(this.state.delimiter + '\\n');\n\t\t}\n\t\tif (this.state.explode !== '\\\\n') {\n\t\t\tif (this.state.isRemoveNewLine === 'false') {\n\t\t\t\tdelimitedText = this.state.columnText.split(/\\n/).join(this.state.delimiter);\n\t\t\t\tdelimitedText = delimitedText.split(this.state.delimiter).join(',\\n');\n\t\t\t} else {\n\t\t\t\tdelimitedText = this.state.columnText.split(/\\n/).join(this.state.delimiter);\n\t\t\t}\n\t\t\t// delimitedText = this.state.columnText.split(this.state.explode).join(this.state.delimiter);\n\t\t}\n\t\tif (this.state.isRemoveDuplicate === 'true') {\n\t\t\tconst delimitedArray = delimitedText.split(this.state.delimiter)\n\t\t\tlet uniqueDelimitedTextArray = []\n\t\t\tdelimitedArray.map(item => {\n\t\t\t\tif (!uniqueDelimitedTextArray.includes(item)) {\n\t\t\t\t\tuniqueDelimitedTextArray.push(item)\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\t});\n\t\t}\n\t\tif (this.state.quotes === '\"\"') {\n\t\t\tdelimitedText = this.state.columnText.split(/\\n/);\n\t\t\tdelimitedText = delimitedText.map(item => '\"' + item + '\"').join(', ');\n\t\t}\n\t\tif (this.state.quotes === \"''\") {\n\t\t\tdelimitedText = this.state.columnText.split(/\\n/);\n\t\t\tdelimitedText = delimitedText.map(item => \"'\" + item + \"'\").join(', ');\n\t\t}\n\t\tthis.setState({\n\t\t\tdelimitedText\n\t\t});\n\t};\n\n\treset = () => {\n\t\tthis.setState({\n\t\t\tcolumnText: '',\n\t\t\tdelimitedText: ''\n\t\t});\n\t};\n\n\tconverterSettingToggle = () => {\n\t\tthis.setState({ isSettingsVisible: !this.state.isSettingsVisible });\n\t};\n\n\tselectExplode = (event) => {\n\t\tthis.setState({\n\t\t\texplode: event.target.value,\n\t\t\tdelimiter: event.target.value\n\t\t});\n\t};\n\n\tremoveNewLine = (event) => {\n\t\tthis.setState({ isRemoveNewLine: event.target.value });\n\t};\n\n\tremoveDuplicateToggle = (event) => {\n\t\tthis.setState({ isRemoveDuplicate: event.target.value });\n\t};\n\n\taddQuotes = (event) => {\n\t\tthis.setState({ quotes: event.target.value });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"delimiter-wrap row m-2 pt-4\">\n\t\t\t\t<ColumnData\n\t\t\t\t\tchangeColumnText={(event) => this.changeColumnText(event)}\n\t\t\t\t\tcolumnText={this.state.columnText} />\n\t\t\t\t<Controls\n\t\t\t\t\tchangeDelimiter={(event) => this.changeDelimiter(event)}\n\t\t\t\t\tdelimitData={this.delimitData}\n\t\t\t\t\treset={this.reset} />\n\t\t\t\t<DelimiterData\n\t\t\t\t\tchangeDelimitedText={(event) => this.changeDelimitedText(event)}\n\t\t\t\t\tdelimitedText={this.state.delimitedText} />\n\t\t\t\t<div className=\"converter-settings col-md-5 offset-3 pl-5 text-center mt-4\">\n\t\t\t\t\t<span className=\"settings-text border p-2\" onClick={this.converterSettingToggle} style={{ cursor: 'pointer' }}>\n\t\t\t\t\t\t<span><img src={settingsImage} style={{ width: '18px', height: '18px' }} alt=\"Not found\" /></span>\n\t\t\t\t\t\t<span className=\"pl-1\">Converter Settings</span>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\tthis.state.isSettingsVisible &&\n\t\t\t\t\t<ConverterSettings\n\t\t\t\t\t\tselectExplode={(event) => this.selectExplode(event)}\n\t\t\t\t\t\tremoveNewLine={(event) => this.removeNewLine(event)}\n\t\t\t\t\t\tremoveDuplicateToggle={(event) => this.removeDuplicateToggle(event)}\n\t\t\t\t\t\taddQuotes={(event) => this.addQuotes(event)} />\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t};\n};\n\nexport default DelimiterWrap;\n","\nimport React, { Component } from 'react';\nimport Header from '../../components/Header/Header';\nimport Description from '../../components/Description/Description';\nimport DelimiterWrap from '../../components/DelimiterWrap/DelimiterWrap';\n\nclass Layout extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"layout\">\n\t\t\t\t<Header />\n\t\t\t\t<Description />\n\t\t\t\t<DelimiterWrap />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Layout;\n","import React, { Component } from 'react';\nimport Layout from './containers/Layout/Layout';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Layout />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/settings.0844b197.svg\";"],"sourceRoot":""}